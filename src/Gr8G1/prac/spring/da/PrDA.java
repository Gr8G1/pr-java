package Gr8G1.prac.spring.da;

public class PrDA {
  /*
   * # DA(Data Access) 기술 유형
   *  - mybatis, Spring JDBC, Spring Data JDBC, JPA, Spring Data JPA 등이 있다.
   *
   * # DDD(Domain Driven Design)란?
   *  - 도메인 주도 설계 정도로 해석할 수 있는데, 용어의 의미 그대로 도메인 위주의 설계 기법을 의미
   *    > 도메인(Domain) & 도메인 지식(Domain Knowledge)이란?
   *      개발에서 흔하게 사용하는 용어로 특정한 전문화된 학문이나 분야의 지식으로, 보편 지식, 도메인 독립 지식과는 반대의 뜻을 지닌다.
   *      일련의 서비스를 구성할때 해당 서비스의 아키텍쳐에 포함되는 전체 흐름에 대한 전반적인(일련의 과정) 지식들을 기술하기 위해 사용된다.
   *      예) 주문 서비스: 고객 주문 과장, 배달 과정, 결제 과정 등 모든 흐름들에 대한 기술에 필요하다.
   *
   * # 애그리거트(Aggregate)란?
   *  - 비슷한 업무 도메인들의 묶음을 말한다. (비슷한 범주의 연관된 업무들을 하나로 그룹화 해놓은 그룹)
   *    예) 회원 -> 회원 정보, 회원 마일리지
   *        주문 -> 주문자 정보, 주문자 주소, 주문자 주문 내역
   *        ..
   *
   * # 애그리거트 루트(Aggregate Root)란?
   *  - 1개 이상으로 구성된 도메인(애그리거트)를 대표하는 도메인을 DDD에서는 애그리거트 루트(Aggregate Root)라고 한다.
   *
   * # 애그리거트 객체 매핑 규칙
   *  1. 모든 엔티티 객체의 상태는 애그리거트 루트를 통해서만 변경할 수 있다.
   *  2. 동일한 애그리거트 내에서의 엔티티간 참조는 객체로 참조한다.
   *  3. 애그리거트 루트 via 애그리거트 루트
   *    - 애그리거트 루트 간의 참조는 객체 참조 대신에 ID로 참조한다.
   *      > 1대1과 1대N 관계일 때는 테이블 간의 외래키 방식과 동일하다.
   *        N대N 관계일 때는 외래키 방식인 ID 참조와 객체 참조 방식이 함께 사용된다.
   *  ~ 핵심
   *    1. N : N의 관계를 —> 1: N, N : 1의 관계로 변경
   *    2. 1 : N, N : 1의 관계를 중간에서 ID를 참조하게 해주는 클래스를 통해 다시 (1 : N : 1) 의 관계로 변경
   *
   */
}
