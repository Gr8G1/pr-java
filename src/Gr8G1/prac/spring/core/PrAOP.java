package Gr8G1.prac.spring.core;

public class PrAOP {
  /*
   * # AOP 용어
   *
   * 애스팩트(Aspect)
   *  - 어드바이스 + 포인트컷의 모듈화 (여러 어드바이스와 포인트컷이 함께 존재한다.)
   *    > 글로벌 기능(횡단 관심)을 HOC(higher-order-component)를 이용해 개별 메소드에 감싼 형태라 생각하면 쉽게 이해할 수 있다.
   *    > 실제 동작 방식은 bytecode 조작을 통해 이뤄진다. (*Spring instrumentation* 참조)
   *
   * 조인포인트(Join point)
   *  - 클래스 초기화, 객체 인스턴스화, 메소드 호출, 필드 접근, 예외 발생과 같은 애플리케이션 실행 흐름에서의 특정 포인트를 의미
   *    > 스프링 AOP는 프록시 방식을 사용하므로 조인 포인트는 항상 메소드 실행 지점으로 제한된다.
   *
   * 포인트컷(Pointcut)
   *  - 조인 포인트 중에서 어드바이스가 적용될 위치를 선별하는 기능
   *    > AspectJ 표현식을 사용해 식별 부분을 지정한다.
   *      프록시를 사용하는 스프링 AOP는 메서드 실행 지점만 포인트컷으로 선별 가능하다.
   *
   * 타겟(Target)
   *  - 어드바이스를 받는 객체이며 포인트컷에 의해 결정된다.
   *
   * 어드바이스(Advice)
   *  - 조인포인트에서 수행되는 코드
   *
   * 어드바이저(Advisor)
   *  - 하나의 어드바이스와 하나의 포인트 컷으로 구성된다.
   *
   * 위빙(Weaving)
   *  - 포인트컷으로 결정한 타겟의 조인 포인트에 어드바이스를 적용것을 일컫는다.
   *    > HOC라 생각하면 이해하기 쉽다.
   *
   */

  /*
   * # 포인트컷 지시자
   *  - execution: 메서드 실행 조인트 포인트를 매칭한다.
   *  - within: 특정 타입 내의 조인 포인트를 매칭한다.
   *  - args: 인자가 주어진 타입의 인스턴스인 조인 포인트
   *  - this: 스프링 빈 객체(스프링 AOP 프록시)를 대상으로 하는 조인 포인트
   *  - target: Target 객체(스프링 AOP 프록시가 가르키는 실제 대상)를 대상으로 하는 조인 포인트
   *  - @target: 실행 객체의 클래스에 주어진 타입의 애너테이션이 있는 조인 포인트
   *  - @within: 주어진 애너테이션이 있는 타입 내 조인 포인트
   *  - @annotation: 메서드가 주어니 애너테이션을 가지고 있는 조인 포인트를 매칭
   *  - @args: 전달된 실제 인수의 런타임 타입이 주어진 타입의 애너테이션을 갖는 조인 포인트
   *  - bean: 스프링 전용 포인트컷 지시자이고 빈의 이름으로 포인트컷을 지정한다.
   *
   * Pointcut 표현식 문법
   *  - execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)
   *  - execution(접근제어자? 반환타입 선언타입?메서드이름(파라미터) 예외?)
   *    > 선언타입은 최상위 패키지명부터 시작한다.
   *    > 메소드 실행 조인포인트를 매칭한다.
   *    > ?는 생략할 수 있다.
   *    > * 같은 패턴을 지정할수있다.
   *
   */
}
