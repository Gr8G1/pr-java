package Gr8G1.prac.section1.oop;

public class PrEncapsulation {
  /*
   * # 객체 지향 프로그래밍(OOP)
   *
   * 객체 지향 프로그래밍 4대 요소
   *  1. *캡슐화*
   *  2. 상속
   *  3. 추상화
   *  4. 다형성
   *
   */

  /*
   * # 캡슐화
   *
   * 캡슐화(Encapsulation)란?
   *  - 객체의 데이터와 기능을 하나로 묶고 외부에 노출되지 않도록 숨김 처리하는 것을 말한다.
   *    클래스, 변수, 메소드에 대해 접근 제어자를 사용함으로써 캡슐화를 할 수 있다.
   *
   * Getter/Setter 란?
   *  - 보호 받는(캡슐화) 객체의 외부에서 직접적으로 내부 데이터에 접근하는 것을 막는데 이는 객체의 데이터를 외부에서 마음대로 읽고 변경할 경우 객체의 무결성(결점이 없는 성질)이 깨어질 수 있기 때문이다.
   *    하여 공개된 메서드(Getter/Setter)를 제공함으로써 데이터 제어를 허용한다.
   *    - getter 정의
   *      - 불리언 외 타입: get<변수명>
          - 불리언 타입: get<변수명> | is<변수명>
   *    - setter 정의
   *      - set<변수명> (타입 매개변수) : *단일(1개)*의 매개변수만을 취한다.
   *      - 새로운 데이터를 저장할때 Varidation을 진행한다.
   *    > 공개된 메서드로 작성시 get/set 명명규칙을 사용하여 작성하는것이 관례이니 지켜주자.
   *
   */

  /*
   * # 패키지
   *
   * 패키지(Package)란?
   *  - 특정한 목적을 공유하는 클래스와 인터페이스의 묶음을 의미한다.
   *  -  패키지는 물리적인 하나의 디렉토리(directory)이고, 하나의 패키지에 속한 클래스나 인터페이스 파일은 모두 해당 패키지에 속한다.
   *     더 나아가, 이 디렉토리는 하나의 계층구조를 가지고 있는데, 계층 구조 간 구분은 점(.)으로 표현한다.
   *    - 계층 비교
   *      - package: Gr8G1.prac.section1.oop
   *      - directory: Gr8G1/prac/section1/oop
   * - 같은 이름을 가진 클래스가 존재할때 각기 다른 패키지에 포함된 경우 클래스 이름으로 인한 충돌이 발생하지않는다.
   * - ! 주의: 패키지가 상위/하위 계층을 이룰 때 두 계층은 상위가 하위를 포함한 관계로 볼 수 없다. (다른 계층으로 취급(상위 패키지 != 하위 패키지))
   * - ! 주의: 상위 패키지에 존재하는 클래스 호출시 import 구문을 사용해야 된다.
   *
   */

  /*
   * # import
   *
   * import란?
   *  - 패키지 내의 클래스를 사용하기 위해 사용하며, 일반적으로 패키지 구문과 클래스문 사이에 작성한다.
   *  - 선언
   *    - import 패키지명.클래스명; / 개별
   *    - import 패키지명.*; / 전체
   *
   */
}
