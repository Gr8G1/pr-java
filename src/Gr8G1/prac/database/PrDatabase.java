package Gr8G1.prac.database;

public class PrDatabase {
  /*
   * # Database
   *
   * 데이터베이스 설계시 고려사항
   *  1. 무결성
   *    - 삽입, 삭제, 갱신등의 연산 후에도 데이터베이스에 저장된 데이터가 정해진 제약 조건을 항상 만족해야한다.
   *  2. 일관성
   *    - 데이터베이스에 저장된 데이터들 사이나, 특정 질의에 대한 응답이 처음부터 끝까지 변함이 없어야한다.
   *  3. 회복
   *    - 시스템에 장애가 발생했을 때 장애 발생 직전의 상태로 복수할 수 있어야한다.
   *  4. 보안
   *    - 불법적인 데이터의 노출 또는 변경이나 손실로부터 보호할 수 있어야한다.
   *  5. 효율성
   *    - 응답시간의 단축, 시스템의 생산성, 저장 공간의 최적화 등이 가능해야한다.
   *  6. 확장
   *    - 데이터베이스 운영에 영향을 주지 않으면서 지속적으로 데이터를 추가할 수 있어야한다.
   *
   * 데이터베이스 설계순서
   *  1. 요구 조건 분석
   *    - 요구 조건 명세서 작성
   *  2. 개념적 설계
   *    - 개념 스키마, 트랜잭션 모델링, E-R 모델 작성
   *  3. 논리적 설계
   *    - 목표(사용) DBMS에 맞는 논리 스키마 설계, 트랜잭션 인터페이스 설계
   *  4. 물리적 설계
   *    - 목표(사용) DBMS에 맞는 물리적 구조로 데이터 변환
   *  5. 구현
   *    - 목표(사용) DBMS의 DDL(데이터 정의어)로 데이터베이스 생성, 트랜잭션 작성
   *
   * *데이터 모델 3요소*
   *  1. 개체(Entity)
   *    - 사람이 생각하는 개념이나 정보단위 같은 현실 세계의 대상체(유-무형정보)이다.
   *    - 영속적(Persistence)으로 존재하는 개체의 집합이다.
   *    - 유일한 식별자(Unique Identifier)에 의해 식별이 가능하다.
   *  2. 속성(Attribute)
   *    - 데이터의 가장 작은 논리적 단위로, 파일 구조상의 데이터 항목 또는 데이터 필드에 해당한다.
   *    - 개체를 구성하는 항목으로 개체의 특성을 기술한다.
   *    - 속성의 수를 디그리(Degree) 또는 차수라 한다.
   *    - 속성의 특성
   *      - 기본 속성
   *        - 가장 일반적인 속성이다.
   *      - 설계 속성
   *        - 설계 단위에서 도출해내는 속성이다.
   *      - 파생 속성
   *        - 다른 속성으로 부터 계산이나 변형 등의 영향을 받는 속성으로 정합성 유지를 위해 되도록 적게 정의하는것이 좋다.
   *  3. 관계(Relationship)
   *    - 개체 간의 관계 또는 속성 간의 논리적인 연결을 의미한다.
   *    - 관계의 형태
   *      - 1:1
   *      - 1:N
   *      - N:M
   *    - 관계의 종류
   *      - 종속(Dependent) 관계
   *        - 두 개체 사이의 주-종 관계를 표현, 식별과 비실벽 관계가 있다.
   *      - 중복(Redundant) 관계
   *        - 두 개체 사이의 2번 이상의 종속 관계가 존재하는 관계이다.
   *      - 재귀(Recursive) 관계
   *        - 자기 자신과 관계를 갖는것으로 순환 관계라고도 한다.
   *      - 베타(Exclusive) 관계
   *        - 개체의 속성이나 구분자를 기준으로 개체의 특성을 분활하는 관계로 베타 AND, OR 관계로 구분한다.
   *        - 베타 AND
   *          - 하위 개체들 중 속성이나 구분자 조건에 따라 하나의 개체만 선택 가능
   *        - 베타 OR
   *          - 하위 개체들 중 속성이나 구분자 조건에 따라 하나 이상의 개체 선택 가능
   *
   * ~ 개념적 데이터 모델
   *  - 현실 세계에 인간의 이해를 기반한 인식을 추상적 개념으로 표현하는 과정이다.
   *  - 속성들로 기술된 개체 타입과, 그 타입들 간의 관계를 이용하여 현실 세계를 표현한다.
   *  - 대표적인 모델로 E-R 모델이 있다.
   *
   * ~ 논리적 데이터 모델
   *  - 개념적 데이터 모델에서 얻은 구조를 컴퓨터가 이해하고 처리할 수 있도록 변환하는 과정이다.
   *  - 필드로 기술된 데이터 타입과 그 타입들  간의 관계를 이용하여 현실 세계를 표현한다.
   *  - 논리적 데이터 모델은 데이터 간의 관계를 어떻게 표현하느냐에 따라 관계, 계층, 네트워크 모델로 구분된다.
   *
   * # 관계형 데이터베이스 (RDBMS)
   *  - 1970년 IBM에 근무하던 에드거 F. 커드(Edgar Frank "Ted" Codd)에 의해 처음 제안되었다.
   *  - 데이터베이스 구성요소인 개체, 관계를 모두 릴레이션(Relation)이라는 표(Table)로 표현한다.
   *    > 개체는 개체 릴레이션, 관계는 관계 릴레이션으로 구분할 수 있다.
   *
   * 관계형 데이터 모델
   *  - 가장 널리 사용되는 모델로, 2차원적인 표(Table)를 이용해서 데이터 상호 관계를 정의하는 DB 구조이다.
   *  - 기본키(Primary Key)와 이를 참조하는 외래키(Forign Key)로 데이터 간의 관계를 표현한다.
   *
   * 관계형 데이터베이스 릴레이션 구조
   *  - 구조를 나타내는 릴레이션 스키마, 실제 값인 릴레이션 인스턴스로 구성된다.
   *    > 릴레이셔 스키마: 릴레이션의 이름, 각각의 속성 이름과 타입, 그리고 속성 값의 도메인(Domain)의 정의의다.
   *    > 릴레이션 인스턴스: 각 속성들의 구체적인 데이터 값을 갖고있는 것을 말한다.
   *
   * 튜플 (파일 구조의 레코드와 같은 의미)
   *  - 릴레이션을 구성하는 각각의 행을 말한다.
   *  - 튜플의 수를 카디널리티(Cardinality) 또는 기수, 대응수라고 한다.
   *    > ***한 릴레이션의 똑같은 튜플은 포함될 수 없다.***
   *
   * 속성
   *  - 속성의 수를 디그리(Degree) 또는 차수라고 한다.
   *
   * 도메인
   *  - 하나의 속성이 취할수 있는 같은 타입의 원자(Atomic)값들의 집합(길이)이다.
   *  - 도메인의 실제 속성 값은 그 값의 합법 여부를 시스템이 검사하는데에도 이용된다.
   *    > 예: 성별 속성의 도메인은 남, 여 그 외에 값은 입력될 수 없다.
   *
   * 키(Key)
   *  - 데이터베이스에서 조건에 만족하는 튜플을 검색하거나 정렬할 때 튜플들을 서로 구분할 수 있는 기준이 되는 속성을 말한다.
   *
   * 후보키 (Candiate Key)
   *  - 튜플을 유일하게 식별할 수 있는 속성의 부분집합으로 기본키로 사용할 수 있는 속성들을 말한다.
   *    > 후보키는 릴레이션에 있는 모든 튜플에 대해서 유일성과 최소성을 만족시켜야한다.
   *      - 유일성(Unique)
   *        - 하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야한다. (중복된 키 값이 존재할 수 있다면 유일성 위반)
   *      - 최소성(Minimality)
   *        - 모든 레코드들을 유일하게 식별하는데 꼭 필요한 속성으로만 구성되어야한다. ()
   *
   * 기본키(Primary Key)
   *  - 후보키 중에서 특별히 선정된 주키(Main Key)로 중복된 값을 가질 수 없다.
   *  - 기본키는 후보키의 성질을 갖는다
   *  - 기본키는 NULL값을 가질 수 없다.
   *
   * 대체키(Alternate Key)
   *  - 대체키는 후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키를 의미한다.
   *
   * 슈퍼키(Super Key)
   *  - 한 릴레이션에 존재하는 속성들의 집합으로 구성된 키이다.
   *  - 유일성은 만족하지만 최소성은 만족하지 않는다.
   *
   * 외래키(Foreign Key)
   *  - 다른 릴레이의 기본키를 참조하는 속성 또는 속성들의 집합이다.
   *  - 참조되는 릴레이션의 기본키와 대응되어 릴레이션 간에 ***참조 관계***를 표현하는 중요한 도구이다.
   *
   * ~ 제약조건
   *  - 무결성(Integrity)
   *    - 데이터베이스에 저장된 값의 정확성을 보장하고 부정확한 자료가 저장되는것을 방지하기 위한 제약조건을 말한다.
   *    - 종류
   *      - 개체 무결성
   *        - 기본 테이블의 기본키를 구성하는 어떤 속성도 NULL값이나 중복값을 가질수 없다는 규정
   *      - 도메인 무결성
   *        - 주어진 속성의 값이 정의된 도메인에 속한 값이어야 한다는 규정
   *          > 성별 속성의 남 또는 여 만 입력되어야 하는 조건과 일치
   *      - 사용자 정의 무결성
   *
   * # 정규화(Normalization)
   *  - 함수정 종속 등의 종속성 이론을 활용하여 설계된 스키마를 더 나은 스키마로 개선하는 과정이다.
   *
   *  정규화 목적
   *  - 데이터 구조의 안전성 및 뮤결성 유지
   *  - 데이터의 중복을 배제하여 이상현상 발생 방지 및 자료 저장 공간의 최소화 유지
   *  - 자료 검색과 추출의 효율성 증대
   *
   *  - 1NF(First normal form)
   *    - 모든 도메인이(Domain)이 *원자값*(Atomic value)으로 이루어져 있는것
   *  - 2NF(Second normal form)
   *    - 1NF를 만족하고 기본키가 아닌 모든 속성이 기본키데 대하여 *완전 함수 종속*을 만족시키는것
   *  - 3NF(Third normal form)
   *    - 2NF를 만족하고 기본키가 아닌 모든 속성이 기본키에 대해 *이행적 종속*을 만족하지 않는것
   *  - BCNF(Boyce–Codd normal form)
   *    - *결정자*가 모두 후보키인 정규형 만족하는것
   *  - 4NF(Fourth normal form)
   *    - *다치 종속*이 성립하는경우 모든 속성이 함수적 종속 관계를 만족하는것
   *  - 5NF(Fifth normal form)
   *    - 모든 *조인 종속*이 후보키를 통해서만 성립되는것
   *
   *  ~ 원자값(Atomic value)
   *    - 더 이상 분해되지 않는(최소 단위)의 값
   *  ~ 함수적 종속
   *    - 데이터가 어떤 기준값에 의해 종속되는것
   *  ~ 완전 함수적 종속
   *    - 속성이 기본키에 의해 결정될때
   *  ~ 부분 함수적 종속
   *    - 속성이 기본키의 일부에 의해 결정될때
   *  ~ 이행적 종속
   *    - A -> B, B -> C, A -> C 를 만족하는 경우
   *  ~ 결정자/종속자
   *    - 결정자: 속성 간의 종속성을 규명할 때 기준이 되는 값
   *    - 종속자: 결정자의 값에 의해 정해지는 값
   *  ~ 다치 종속
   *    - A, B, C 속성이 존재할때 복합 속성(A, C)에 대응하는 B값의 집합이 A 종속되고 C와 무관할때
   *  ~ 조인 종속
   *    - 속성에 대한 부분 집합 A, B, C 각각의 조인 결과가 R을 만족할때
   *
   * # 반정규화(Denormalization)
   *  > 시스템의 성능 향상, 개발 및 운영이 편의성 들을 위해 정규화된 데이터 모델을 통합, 중복, 분리하는 과정으로
   *    의도적으로 정규화 원칙을 위배하는 행위
   *  - 테이블 통합
   *    - 2개 이상의 테이블 조인되는 경우가 많아 테이블을 통합시 성능 향상을에 도움이 될시 수행
   *      > 테이블 통합시 데이터 검색은 간편하나 레코드 증가로 인해 처리량이 증가하고 입력, 수정 삭제의 규칙의 복잡도가 상승할 우려가 있으며,
   *        NOT NULL, DEFAULT, CHECK 등의 제약조건을 설정하기 여럽다.
   *  - 테이블 분할
   *    - 테이블을 수직(속성이 너무 많을시) 또는 수평(레코드별 사용 빈도수가 상이할 시) 분활하여 성능 향상에 도움이 될 경우 수행
   *  - 중복 테이블 추가
   *    - 여러 테이블에서 데이터를 추출해서 사용해야 하거나 다른 서버에 저장된 테이블을 이용해야 할 경우 중복 테이블을 추가해
   *      작업의 효율성을 향상 시킬 수 있을때 수행
   *  - 중복 속성 추가
   *    - 테이블을 조인하여 데이터를 처리할 시 데이터 조회 경로를 단축 시키기 위해 자주 사용하는 속성을 추가하여
   *      작업 효율성을 향상 시킬 수 있을때 수행
   *      > 중복 속성 추가시 데이터의 무결성 확보가 어렵고 디스크 공간이 추가로 필요한 단점이 있다
   *
   * 트랜잭션(Transaction)
   *  - 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 일련의 연산들을 의미한다.
   *
   * 트랙잭션의 특성
   *  - 무결성(Intergrity) 보장을 위해 트랜잭션이 가져야할 특성 4가지
   *    1. Atomisity(원자성)
   *      - 트랜잭션의 연산은 DB에 모두 반영되도록 완료(Commit)되거나 전혀 반영되지 않도록 복구(Rollback)되어야한다.
   *        > 트랜잭션 내의 모든 명령이 완료되거나 하나의 오류라도 발생할시 모든 명령이 취소되어야한다.
   *    2. Consistency(일관성)
   *      - 트랜잭션이 성공적으로 완료되면 언제나 일관성 있는 데이터베이스 상태를 유지한다.
   *        > 시스템의 고정 요소는 트랜잭션의 전/후 상태가 같아야한다.
   *    3. Isolation(독립성, 격리성, 순차성)
   *      - 둘 이상의 트랜잭션이 동시에 병행 실행될 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없다.
   *        > 수행중이 트랜잭션은 완전히 완료될 때까지 다른 트랜잭션이 결과를 참조할 수 없다.
   *    4. Durability(영속성, 지속성)
   *      - 시스템이 고장(오류)나더라도 완료된 트랜잭션의 결과를 영구적으로 반영되어야한다.
   *  > ~ 트랜잭션의 특성 4가지의 앞 글자를 따 ACID로 칭한다.
   *
   * 뷰(View)
   *  -
   *
   * 인덱스(Index)
   *  -
   *
   * 저장 프로시저(Stored Procedure)
   *  - 일련의 SQL를 마치 하나의 함수처럼 실행하기 위한 쿼리의 집합체이다.
   *
   * 저장 함수(Stored Function)
   *  -
   *
   */
}
