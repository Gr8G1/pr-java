package Gr8G1.prac.database;

public class PrDatabase {
  /*
   * # Database
   *
   * 데이터베이스 설계시 고려사항
   *  1. 무결성
   *    - 삽입, 삭제, 갱신등의 연산 후에도 데이터베이스에 저장된 데이터가 정해진 제약 조건을 항상 만족해야한다.
   *  2. 일관성
   *    - 데이터베이스에 저장된 데이터들 사이나, 특정 질의에 대한 응답이 처음부터 끝까지 변함이 없어야한다.
   *  3. 회복
   *    - 시스템에 장애가 발생했을 때 장애 발생 직전의 상태로 복수할 수 있어야한다.
   *  4. 보안
   *    - 불법적인 데이터의 노출 또는 변경이나 손실로부터 보호할 수 있어야한다.
   *  5. 효율성
   *    - 응답시간의 단축, 시스템의 생산성, 저장 공간의 최적화 등이 가능해야한다.
   *  6. 확장
   *    - 데이터베이스 운영에 영향을 주지 않으면서 지속적으로 데이터를 추가할 수 있어야한다.
   *
   * 데이터베이스 설계순서
   *  1. 요구 조건 분석
   *    - 요구 조건 명세서 작성
   *  2. 개념적 설계
   *    - 개념 스키마, 트랜잭션 모델링, E-R 모델 작성
   *  3. 논리적 설계
   *    - 목표(사용) DBMS에 맞는 논리 스키마 설계, 트랜잭션 인터페이스 설계
   *  4. 물리적 설계
   *    - 목표(사용) DBMS에 맞는 물리적 구조로 데이터 변환
   *  5. 구현
   *    - 목표(사용) DBMS의 DDL(데이터 정의어)로 데이터베이스 생성, 트랜잭션 작성
   *
   * *데이터 모델 3요소*
   *  1. 개체(Entity)
   *    - 사람이 생각하는 개념이나 정보단위 같은 현실 세계의 대상체(유-무형정보)이다.
   *    - 영속적(Persistence)으로 존재하는 개체의 집합이다.
   *    - 유일한 식별자(Unique Identifier)에 의해 식별이 가능하다.
   *  2. 속성(Attribute)
   *    - 데이터의 가장 작은 논리적 단위로, 파일 구조상의 데이터 항목 또는 데이터 필드에 해당한다.
   *    - 개체를 구성하는 항목으로 개체의 특성을 기술한다.
   *    - 속성의 수를 디그리(Degree) 또는 차수라 한다.
   *    - 속성의 특성
   *      - 기본 속성
   *        - 가장 일반적인 속성이다.
   *      - 설계 속성
   *        - 설계 단위에서 도출해내는 속성이다.
   *      - 파생 속성
   *        - 다른 속성으로 부터 계산이나 변형 등의 영향을 받는 속성으로 정합성 유지를 위해 되도록 적게 정의하는것이 좋다.
   *  3. 관계(Relationship)
   *    - 개체 간의 관계 또는 속성 간의 논리적인 연결을 의미한다.
   *    - 관계의 형태
   *      - 1:1
   *      - 1:N
   *      - N:M
   *    - 관계의 종류
   *      - 종속(Dependent) 관계
   *        - 두 개체 사이의 주-종 관계를 표현, 식별과 비실벽 관계가 있다.
   *      - 중복(Redundant) 관계
   *        - 두 개체 사이의 2번 이상의 종속 관계가 존재하는 관계이다.
   *      - 재귀(Recursive) 관계
   *        - 자기 자신과 관계를 갖는것으로 순환 관계라고도 한다.
   *      - 베타(Exclusive) 관계
   *        - 개체의 속성이나 구분자를 기준으로 개체의 특성을 분활하는 관계로 베타 AND, OR 관계로 구분한다.
   *        - 베타 AND
   *          - 하위 개체들 중 속성이나 구분자 조건에 따라 하나의 개체만 선택 가능
   *        - 베타 OR
   *          - 하위 개체들 중 속성이나 구분자 조건에 따라 하나 이상의 개체 선택 가능
   *
   * ~ 개념적 데이터 모델
   *  - 현실 세계에 인간의 이해를 기반한 인식을 추상적 개념으로 표현하는 과정이다.
   *  - 속성들로 기술된 개체 타입과, 그 타입들 간의 관계를 이용하여 현실 세계를 표현한다.
   *  - 대표적인 모델로 E-R 모델이 있다.
   *
   * ~ 논리적 데이터 모델
   *  - 개념적 데이터 모델에서 얻은 구조를 컴퓨터가 이해하고 처리할 수 있도록 변환하는 과정이다.
   *  - 필드로 기술된 데이터 타입과 그 타입들  간의 관계를 이용하여 현실 세계를 표현한다.
   *  - 논리적 데이터 모델은 데이터 간의 관계를 어떻게 표현하느냐에 따라 관계, 계층, 네트워크 모델로 구분된다.
   *
   * # 관계형 데이터베이스 (RDBMS)
   *  - 1970년 IBM에 근무하던 에드거 F. 커드(Edgar Frank "Ted" Codd)에 의해 처음 제안되었다.
   *  - 데이터베이스 구성요소인 개체, 관계를 모두 릴레이션(Relation)이라는 표(Table)로 표현한다.
   *    > 개체는 개체 릴레이션, 관계는 관계 릴레이션으로 구분할 수 있다.
   *
   * 관계형 데이터 모델
   *  - 가장 널리 사용되는 모델로, 2차원적인 표(Table)를 이용해서 데이터 상호 관계를 정의하는 DB 구조이다.
   *  - 기본키(Primary Key)와 이를 참조하는 외래키(Forign Key)로 데이터 간의 관계를 표현한다.
   *
   * 관계형 데이터베이스 릴레이션 구조
   *  - 구조를 나타내는 릴레이션 스키마, 실제 값인 릴레이션 인스턴스로 구성된다.
   *    > 릴레이셔 스키마: 릴레이션의 이름, 각각의 속성 이름과 타입, 그리고 속성 값의 도메인(Domain)의 정의의다.
   *    > 릴레이션 인스턴스: 각 속성들의 구체적인 데이터 값을 갖고있는 것을 말한다.
   *
   * 튜플 (파일 구조의 레코드와 같은 의미)
   *  - 릴레이션을 구성하는 각각의 행을 말한다.
   *  - 튜플의 수를 카디널리티(Cardinality) 또는 기수, 대응수라고 한다.
   *    > ***한 릴레이션의 똑같은 튜플은 포함될 수 없다.***
   *
   * 속성
   *  - 속성의 수를 디그리(Degree) 또는 차수라고 한다.
   *
   * 도메인
   *  - 하나의 속성이 취할수 있는 같은 타입의 원자(Atomic)값들의 집합(길이)이다.
   *  - 도메인의 실제 속성 값은 그 값의 합법 여부를 시스템이 검사하는데에도 이용된다.
   *    > 예: 성별 속성의 도메인은 남, 여 그 외에 값은 입력될 수 없다.
   *
   *
   *
   *
   *
   *
   */
}
